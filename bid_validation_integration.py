# Integration module for adding bid validation to existing GeneratorAnalyzer

"""
Integration Module for Bid Validation

This module provides easy integration of bid validation into your existing
GeneratorAnalyzer workflow. Simply import and call the integration functions
to add comprehensive bid validation to your generator analysis.

Usage:
    from bid_validation_integration import add_bid_validation_to_analyzer

    # In your GeneratorAnalyzer.__init__ method:
    add_bid_validation_to_analyzer(self)

    # In your run_batch_analysis method:
    self.run_bid_validation()
"""

from bid_validation import BidValidator, BidValidationResult
import pandas as pd
from datetime import datetime
from typing import List, Dict, Optional


def add_bid_validation_to_analyzer(analyzer_instance):
    """
    Add bid validation capabilities to an existing GeneratorAnalyzer instance.

    Args:
        analyzer_instance: Your GeneratorAnalyzer instance
    """

    # Initialize bid validator
    analyzer_instance.bid_validator = BidValidator(
        market=analyzer_instance.config.MARKET,
        config=(
            analyzer_instance.config.get_bid_validation_config()
            if hasattr(analyzer_instance.config, "get_bid_validation_config")
            else None
        ),
    )

    # Add validation results storage
    analyzer_instance.bid_validation_results = None
    analyzer_instance.bid_validation_summary = {}

    # Add methods to analyzer instance
    analyzer_instance.run_bid_validation = lambda: run_bid_validation(analyzer_instance)
    analyzer_instance.get_bid_validation_summary = lambda: get_bid_validation_summary(
        analyzer_instance
    )
    analyzer_instance.save_bid_validation_results = lambda: save_bid_validation_results(
        analyzer_instance
    )

    print("Bid validation capabilities added to GeneratorAnalyzer")


def run_bid_validation(analyzer_instance) -> pd.DataFrame:
    """
    Run bid validation for all generators in the analyzer.

    Args:
        analyzer_instance: GeneratorAnalyzer instance with bid_validator

    Returns:
        DataFrame with validation results
    """
    print("Starting bid validation for analyzed generators...")

    # Get list of generators being analyzed
    generator_names = analyzer_instance.generators["name"].tolist()

    # Run validation
    validation_results = analyzer_instance.bid_validator.run_comprehensive_validation(
        generator_names
    )

    # Store results
    analyzer_instance.bid_validation_results = validation_results

    # Save CSV results without generating PDF (PDF will be generated by the main analyzer)
    if not validation_results.empty:
        analyzer_instance.bid_validator.save_results(
            filename_prefix=f"bid_validation_{analyzer_instance.config.MARKET}",
            generate_pdf=False,  # Don't generate PDF - will be included in comprehensive report
        )

        # Ensure final_results is available for the main analyzer's PDF report
        analyzer_instance.bid_validator.final_results = validation_results

    # Generate summary
    if not validation_results.empty:
        analyzer_instance.bid_validation_summary = {
            "total_issues": len(validation_results),
            "critical_issues": len(
                validation_results[validation_results["severity"] == "critical"]
            ),
            "high_issues": len(
                validation_results[validation_results["severity"] == "high"]
            ),
            "medium_issues": len(
                validation_results[validation_results["severity"] == "medium"]
            ),
            "generators_with_issues": validation_results["generator_name"].nunique(),
            "most_common_issue": (
                validation_results["validation_type"].value_counts().index[0]
                if len(validation_results) > 0
                else None
            ),
            "timestamp": datetime.now().isoformat(),
        }
    else:
        analyzer_instance.bid_validation_summary = {
            "total_issues": 0,
            "message": "No bid validation issues found",
            "timestamp": datetime.now().isoformat(),
        }

    return validation_results


def get_bid_validation_summary(analyzer_instance) -> Dict:
    """
    Get summary of bid validation results.

    Args:
        analyzer_instance: GeneratorAnalyzer instance

    Returns:
        Dictionary with summary statistics
    """
    return analyzer_instance.bid_validation_summary


def save_bid_validation_results(analyzer_instance) -> None:
    """
    Save bid validation results to CSV files.

    Args:
        analyzer_instance: GeneratorAnalyzer instance
    """
    if (
        not hasattr(analyzer_instance, "bid_validation_results")
        or analyzer_instance.bid_validation_results.empty
    ):
        print("No bid validation results to save")
        return

    # Save detailed results
    timestamp = analyzer_instance.today_date_str
    detailed_filename = (
        f"bid_validation_detailed_{analyzer_instance.config.MARKET}_{timestamp}.csv"
    )
    analyzer_instance.bid_validation_results.to_csv(detailed_filename, index=False)

    # Save summary
    summary_df = pd.DataFrame([analyzer_instance.bid_validation_summary])
    summary_filename = (
        f"bid_validation_summary_{analyzer_instance.config.MARKET}_{timestamp}.csv"
    )
    summary_df.to_csv(summary_filename, index=False)

    print(f"Bid validation results saved:")
    print(f"  - {detailed_filename}")
    print(f"  - {summary_filename}")


def enhance_final_reports_with_bid_validation(
    analyzer_instance,
    all_results: List[pd.DataFrame],
    all_anomalies: List[pd.DataFrame],
    all_alerts: List[Dict],
):
    """
    Enhance the final reports generation to include bid validation results.

    Args:
        analyzer_instance: GeneratorAnalyzer instance
        all_results: List of results DataFrames
        all_anomalies: List of anomaly DataFrames
        all_alerts: List of alert dictionaries
    """

    # Run bid validation if not already done
    if (
        not hasattr(analyzer_instance, "bid_validation_results")
        or analyzer_instance.bid_validation_results is None
        or analyzer_instance.bid_validation_results.empty
    ):
        analyzer_instance.run_bid_validation()

    # Add bid validation summary to console output
    if hasattr(analyzer_instance, "bid_validation_summary"):
        summary = analyzer_instance.bid_validation_summary

        print(f"\n=== BID VALIDATION SUMMARY ===")
        print(f"Total bid validation issues: {summary.get('total_issues', 0)}")

        if summary.get("total_issues", 0) > 0:
            print(f"Critical issues: {summary.get('critical_issues', 0)}")
            print(f"High severity issues: {summary.get('high_issues', 0)}")
            print(f"Medium severity issues: {summary.get('medium_issues', 0)}")
            print(
                f"Generators with bid issues: {summary.get('generators_with_issues', 0)}"
            )

            if summary.get("most_common_issue"):
                print(f"Most common issue: {summary.get('most_common_issue')}")

            # Show top problematic generators for bids
            if not analyzer_instance.bid_validation_results.empty:
                critical_high = analyzer_instance.bid_validation_results[
                    analyzer_instance.bid_validation_results["severity"].isin(
                        ["critical", "high"]
                    )
                ]

                if not critical_high.empty:
                    print(f"\nTop 5 Critical/High Bid Issues:")
                    top_issues = critical_high.head(5)
                    for _, row in top_issues.iterrows():
                        print(
                            f"  {row['generator_name']}: {row['validation_type']} - {row['message'][:100]}..."
                        )

        # Save bid validation results
        analyzer_instance.save_bid_validation_results()


def create_enhanced_config_with_bid_validation():
    """
    Create an enhanced configuration class that includes bid validation settings.
    You can use this as a reference to add to your existing Config class.
    """

    # Add this to your existing Config class:
    BID_VALIDATION = {
        "enable_bid_validation": True,  # Set to True to enable
        "validation_thresholds": {
            "pmin_tolerance": 0.05,  # 5% tolerance for first block vs pmin
            "generation_percentile": 80,  # 80th percentile check
            "pmax_ratio_threshold": 0.9,  # 90% of pmax threshold
            "price_jump_factor": 10.0,  # Factor for detecting unrealistic price jumps
            "min_data_points": 168,  # Minimum hours of generation data (1 week)
            "lookback_hours": 1000,  # Hours to look back for generation analysis
        },
        "gcs_config": {
            "bucket_name": "marginalunit-placebo-metadata",
            "base_paths": {
                "miso": "metadata/miso.resourcedb/2024-11-19/",
                "spp": "metadata/spp.resourcedb/2024-11-19/",
                "ercot": "metadata/ercot.resourcedb.v2/2024-11-25/",
                "pjm": "metadata/pjm.resourcedb/2024-11-19/",
            },
        },
    }

    def get_bid_validation_config(self):
        """Get configuration for bid validation."""
        return {
            "URL_ROOT": self.URL_ROOT,
            "GO_TO_GCLOUD": True,
            "gcs_config": self.BID_VALIDATION["gcs_config"],
            "reflow_collections": {
                "miso": "miso-se",
                "spp": "spp-se",
                "ercot": "ercot-rt-se",
                "pjm": "pjm-se",
            },
        }

    return BID_VALIDATION, get_bid_validation_config


# Example of how to integrate into your existing GeneratorAnalyzer class
def example_integration():
    """
    Example showing how to integrate bid validation into your existing code.
    """

    # In your GeneratorAnalyzer.__init__ method, add:
    """
    # Add bid validation if enabled
    if self.config.BID_VALIDATION.get('enable_bid_validation', False):
        from bid_validation_integration import add_bid_validation_to_analyzer
        add_bid_validation_to_analyzer(self)
    """

    # In your run_batch_analysis method, add after anomaly detection:
    """
    # Run bid validation if enabled
    if hasattr(self, 'bid_validator'):
        print("Running bid validation...")
        self.run_bid_validation()
    """

    # In your _generate_final_reports method, add:
    """
    # Include bid validation in final reports
    if hasattr(self, 'bid_validator'):
        from bid_validation_integration import enhance_final_reports_with_bid_validation
        enhance_final_reports_with_bid_validation(self, all_results, all_anomalies, all_alerts)
    """


if __name__ == "__main__":
    # Example configuration
    bid_validation_config, get_config_method = (
        create_enhanced_config_with_bid_validation()
    )
    print("Enhanced configuration created. Add this to your Config class:")
    print(f"BID_VALIDATION = {bid_validation_config}")
